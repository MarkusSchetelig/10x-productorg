import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import * as Icons from 'lucide-react'
import { challenges, consultingAreas, stats } from '../data/consultingData'
import './ProblemSolution.css'

const ProblemSolution = () => {
  const [flippedCards, setFlippedCards] = useState(new Set())
  const [selectedCategory, setSelectedCategory] = useState(null)

  const getIcon = (iconName) => {
    const Icon = Icons[iconName] || Icons.Circle
    return <Icon size={32} />
  }

  const handleCardFlip = (id) => {
    setFlippedCards(prev => {
      const newSet = new Set(prev)
      if (newSet.has(id)) {
        newSet.delete(id)
      } else {
        newSet.add(id)
      }
      return newSet
    })
  }

  const matchedPairs = [
    { challenge: 1, solutions: [1, 4] }, // Strategic Misalignment -> Strategic Alignment & Pilots
    { challenge: 2, solutions: [2, 5] }, // Tool Overload -> Toolchain & Workflow Engineering
    { challenge: 3, solutions: [3] }, // Security Risks -> Governance
    { challenge: 4, solutions: [6, 9] }, // Cultural Resistance -> Change & Training
    { challenge: 5, solutions: [7] }, // Knowledge Silos -> Knowledge Management
    { challenge: 6, solutions: [8] }, // Measurement Blindness -> Impact Tracking
  ]

  const getMatchingSolutions = (challengeId) => {
    const match = matchedPairs.find(pair => pair.challenge === challengeId)
    return match ? consultingAreas.filter(area => match.solutions.includes(area.id)) : []
  }

  return (
    <div className="ps-container">
      <header className="ps-header">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          <h1>Transform Challenges into Opportunities</h1>
          <p>Click on any challenge card to reveal our targeted consulting solutions</p>
        </motion.div>

        <motion.div 
          className="stats-highlight"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3 }}
        >
          <div className="stat-badge">
            <span className="stat-number">95%</span>
            <span className="stat-text">of code could be AI-generated by 2030</span>
          </div>
          <div className="stat-attribution">- Microsoft CTO Kevin Scott</div>
        </motion.div>
      </header>

      <div className="ps-main">
        <section className="challenges-section">
          <h2>Common AI SDLC Transformation Challenges</h2>
          <div className="cards-grid">
            {challenges.map((challenge, index) => {
              const isFlipped = flippedCards.has(challenge.id)
              const solutions = getMatchingSolutions(challenge.id)
              
              return (
                <motion.div
                  key={challenge.id}
                  className="card-container"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <div 
                    className={`flip-card ${isFlipped ? 'flipped' : ''}`}
                    onClick={() => handleCardFlip(challenge.id)}
                  >
                    <div className="flip-card-inner">
                      <div className="flip-card-front challenge-front">
                        <div className="card-icon">{getIcon(challenge.icon)}</div>
                        <h3>{challenge.title}</h3>
                        <p>{challenge.description}</p>
                        <div className="flip-hint">
                          <Icons.RotateCw size={16} />
                          <span>Click to see solutions</span>
                        </div>
                      </div>
                      <div className="flip-card-back">
                        <h4>Our Solutions:</h4>
                        <div className="solutions-list">
                          {solutions.map(solution => (
                            <div 
                              key={solution.id} 
                              className="mini-solution"
                              style={{ borderLeftColor: solution.color }}
                            >
                              <div className="solution-icon-small" style={{ color: solution.color }}>
                                {getIcon(solution.icon)}
                              </div>
                              <div>
                                <h5>{solution.shortTitle}</h5>
                                <p>{solution.benefits[0]}</p>
                              </div>
                            </div>
                          ))}
                        </div>
                        <button 
                          className="explore-btn"
                          onClick={(e) => {
                            e.stopPropagation()
                            setSelectedCategory(solutions[0]?.id)
                          }}
                        >
                          Explore Solutions
                          <Icons.ArrowRight size={16} />
                        </button>
                      </div>
                    </div>
                  </div>
                </motion.div>
              )
            })}
          </div>
        </section>

        <section className="solutions-section">
          <h2>Comprehensive Consulting Services</h2>
          <p className="section-subtitle">
            A complete suite of services to guide your AI transformation journey
          </p>
          
          <div className="solution-categories">
            {consultingAreas.map((area, index) => (
              <motion.div
                key={area.id}
                className={`solution-category ${selectedCategory === area.id ? 'selected' : ''}`}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: index * 0.05 }}
                onClick={() => setSelectedCategory(area.id)}
                whileHover={{ y: -5 }}
              >
                <div 
                  className="category-header"
                  style={{ backgroundColor: area.color }}
                >
                  <div className="category-icon">{getIcon(area.icon)}</div>
                </div>
                <div className="category-content">
                  <h3>{area.title}</h3>
                  <p>{area.description}</p>
                  <div className="category-benefits">
                    {area.benefits.map((benefit, idx) => (
                      <div key={idx} className="benefit-item">
                        <Icons.CheckCircle size={16} style={{ color: area.color }} />
                        <span>{benefit}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </section>

        <motion.section 
          className="cta-section"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.8 }}
        >
          <div className="cta-content">
            <h2>Ready to Transform Your SDLC?</h2>
            <p>Don't let these challenges hold you back from the AI revolution</p>
            <div className="cta-buttons">
              <motion.button
                className="cta-primary"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Icons.Calendar size={20} />
                Schedule a Consultation
              </motion.button>
              <motion.button
                className="cta-secondary"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Icons.Download size={20} />
                Download AI SDLC Guide
              </motion.button>
            </div>
          </div>
          <div className="trust-indicators">
            <div className="trust-item">
              <Icons.Shield size={24} />
              <span>Enterprise Security</span>
            </div>
            <div className="trust-item">
              <Icons.Award size={24} />
              <span>Industry Leaders</span>
            </div>
            <div className="trust-item">
              <Icons.Users size={24} />
              <span>500+ Transformations</span>
            </div>
          </div>
        </motion.section>
      </div>
    </div>
  )
}

export default ProblemSolution